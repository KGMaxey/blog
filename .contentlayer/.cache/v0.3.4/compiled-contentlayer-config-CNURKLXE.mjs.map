{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypeSlug from 'rehype-slug'\nimport GithubSlugger from 'github-slugger'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\n\nconst Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: '**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true\n    },\n    date: {\n      // TODO: KGM - Turn this into computed date?\n      type: 'date',\n      description: 'The date of the post',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' }\n    },\n    description: {\n      type: 'string',\n      description: 'Post Description',\n      required: true\n    }\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/posts/${doc._raw.flattenedPath}`\n    },\n    headings: {\n      type: 'list',\n      resolve: (doc) => {\n        const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\n        const slugger = new GithubSlugger()\n        const body = `\\n${doc.body.raw}` // Preprend doc with whitespace to account for removed whitespace from frontmatter\n\n        return Array.from(body.matchAll(regXHeader)).map(match => {\n          const flag = match.groups?.flag\n          const content = match.groups?.content\n          const slug = content ? slugger.slug(content) : undefined\n\n          return { flag, content, slug }\n        })\n      }\n    }\n  }\n}))\n\n// const AboutMe = defineDocumentType(() => ({\n//   name: 'AboutMe',\n//   filePathPattern: \n// }))\n\nexport default makeSource({\n  contentDirPath: 'posts',\n  documentTypes: [Post],\n  mdx: {\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: 'append' }]]\n  }\n})"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,gBAAgB;AACvB,OAAO,mBAAmB;AAC1B,OAAO,4BAA4B;AAEnC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA;AAAA,MAEJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACvB;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACpD;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,cAAM,aAAa;AAEnB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,OAAO;AAAA,EAAK,IAAI,KAAK,GAAG;AAE9B,eAAO,MAAM,KAAK,KAAK,SAAS,UAAU,CAAC,EAAE,IAAI,WAAS;AACxD,gBAAM,OAAO,MAAM,QAAQ;AAC3B,gBAAM,UAAU,MAAM,QAAQ;AAC9B,gBAAM,OAAO,UAAU,QAAQ,KAAK,OAAO,IAAI;AAE/C,iBAAO,EAAE,MAAM,SAAS,KAAK;AAAA,QAC/B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAOF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC,CAAC;AAAA,EAC9E;AACF,CAAC;",
  "names": []
}
